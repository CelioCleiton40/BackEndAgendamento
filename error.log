{"level":"error","message":"Erro ao registrar usuário: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\JW COWORKING\\Documents\\celio\\BackEndAgendamento\\src\\services\\authService.ts:16:44\n\n  13 const validatedData = validateUser(userData);\n  14 \n  15 // Verifica se o e-mail já está cadastrado\n→ 16 const existingUser = await prisma.user.findUnique(\nThe provided database string is invalid. Error parsing connection string: invalid port number in database URL. Please refer to the documentation in https://www.prisma.io/docs/reference/database-reference/connection-urls for constructing a correct connection string. In some cases, certain characters must be escaped. Please check the string for any illegal characters.","timestamp":"2025-02-04T13:29:44.420Z"}
{"level":"error","message":"Erro ao registrar usuário: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\JW COWORKING\\Documents\\celio\\BackEndAgendamento\\src\\services\\authService.ts:16:44\n\n  13 const validatedData = validateUser(userData);\n  14 \n  15 // Verifica se o e-mail já está cadastrado\n→ 16 const existingUser = await prisma.user.findUnique(\nThe provided database string is invalid. Error parsing connection string: invalid port number in database URL. Please refer to the documentation in https://www.prisma.io/docs/reference/database-reference/connection-urls for constructing a correct connection string. In some cases, certain characters must be escaped. Please check the string for any illegal characters.","timestamp":"2025-02-04T13:29:44.422Z"}
{"level":"error","message":"Erro ao registrar usuário: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\JW COWORKING\\Documents\\celio\\BackEndAgendamento\\src\\services\\authService.ts:16:44\n\n  13 const validatedData = validateUser(userData);\n  14 \n  15 // Verifica se o e-mail já está cadastrado\n→ 16 const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","timestamp":"2025-02-04T13:33:48.765Z"}
{"level":"error","message":"Erro ao registrar usuário: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\JW COWORKING\\Documents\\celio\\BackEndAgendamento\\src\\services\\authService.ts:16:44\n\n  13 const validatedData = validateUser(userData);\n  14 \n  15 // Verifica se o e-mail já está cadastrado\n→ 16 const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","timestamp":"2025-02-04T13:33:48.768Z"}
{"level":"error","message":"Erro ao registrar usuário: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\JW COWORKING\\Documents\\celio\\BackEndAgendamento\\src\\services\\authService.ts:16:44\n\n  13 const validatedData = validateUser(userData);\n  14 \n  15 // Verifica se o e-mail já está cadastrado\n→ 16 const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","timestamp":"2025-02-04T14:33:28.573Z"}
{"level":"error","message":"Erro ao registrar usuário: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\JW COWORKING\\Documents\\celio\\BackEndAgendamento\\src\\services\\authService.ts:16:44\n\n  13 const validatedData = validateUser(userData);\n  14 \n  15 // Verifica se o e-mail já está cadastrado\n→ 16 const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","timestamp":"2025-02-04T14:33:28.577Z"}
{"level":"error","message":"Erro ao registrar usuário: E-mail já registrado","timestamp":"2025-02-04T18:29:39.545Z"}
{"level":"error","message":"Erro ao registrar usuário: E-mail já registrado","timestamp":"2025-02-04T18:29:39.546Z"}
{"level":"error","message":"Erro na autenticação: Token não fornecido ou inválido","timestamp":"2025-02-04T18:49:50.215Z"}
